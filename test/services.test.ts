// Generated by CodiumAI

import { Reducer } from "../src/reducers";
import { unary, serverStreaming, clientStreaming, bidiStreaming } from "../src/services";



describe('unary', () => {

    // Returns a GrpcUnaryMethod object with the correct parameters
    it('should return a GrpcUnaryMethod object with the correct values', () => {
      // Arrange
      const service = { name: 'Service' };
      const name = 'Method';
      const encode = (v: any) => new Uint8Array(0);
      const decode = (v: Uint8Array) => ({});

      // Act
      const result = unary(service, name, encode, decode);

      // Assert
      expect(result.service).toBe(service);
      expect(result.name).toBe(name);
      expect(result.encode).toBe(encode);
      expect(result.decode).toBe(decode);
      expect(result.reducer).toBeUndefined();
      expect(result.clientStreaming).toBe(false);
    });
});

describe('serverStreaming', () => {
    // Returns a GrpcServerStreamingMethod object with the correct parameters
    it('should return a GrpcServerStreamingMethod object with the correct values', () => {
    // Arrange
    const service = { name: 'Service' };
    const name = 'Method';
    const encode = (v: any) => new Uint8Array(0);
    const decode = (v: Uint8Array) => ({});
    const reducer = () => ({} as Reducer<unknown, {}>);

    // Act
    const result = serverStreaming(service, name, encode, decode, reducer);

    // Assert
    expect(result.service).toBe(service);
    expect(result.name).toBe(name);
    expect(result.encode).toBe(encode);
    expect(result.decode).toBe(decode);
    expect(result.reducer).toBe(reducer);
    expect(result.clientStreaming).toBe(false);
    });
});

describe('clientStreaming', () => {
    // Returns a GrpcClientStreamingMethod object with the correct parameters
    it('should return a GrpcClientStreamingMethod object with the correct values', () => {
    // Arrange
    const service = { name: 'Service' };
    const name = 'Method';
    const encode = (v: any) => new Uint8Array(0);
    const decode = (v: Uint8Array) => ({});

    // Act
    const result = clientStreaming(service, name, encode, decode);

    // Assert
    expect(result.service).toBe(service);
    expect(result.name).toBe(name);
    expect(result.encode).toBe(encode);
    expect(result.decode).toBe(decode);
    expect(result.reducer).toBeUndefined();
    expect(result.clientStreaming).toBe(true);
    });
});

describe('bidiStreaming', () => {
    // Returns a GrpcBidirectionalMethod object with the correct parameters
    it('should return a GrpcBidirectionalMethod object with the correct values', () => {
    // Arrange
    const service = { name: 'Service' };
    const name = 'Method';
    const encode = (v: any) => new Uint8Array(0);
    const decode = (v: Uint8Array) => ({});
    const reducer = () => ({} as Reducer<unknown, {}>);

    // Act
    const result = bidiStreaming(service, name, encode, decode, reducer);

    // Assert
    expect(result.service).toBe(service);
    expect(result.name).toBe(name);
    expect(result.encode).toBe(encode);
    expect(result.decode).toBe(decode);
    expect(result.reducer).toBe(reducer);
    expect(result.clientStreaming).toBe(true);
    });
});